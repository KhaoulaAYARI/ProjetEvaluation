{% extends 'base.html.twig' %}  

{% block title %}Hello FiltreController!{% endblock %}

{% block body %}
{{ form_start(form, {'attr':{'id':'commande-recherche-form'}}) }}
{{ form_row(form.numero) }}
<button type="submit" class="btn btn-outline-primary">Rechercher</button>
{{ form_end(form) }}
<div id="div_resultats"></div>

{# On a importé axios ici pour nous simplifier le code #}
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.2/axios.min.js" integrity="sha512-JSCFHhKDilTRRXe9ak/FJ28dcpOJxzQaCd3Xg8MyF6XFjODhy/YMCM8HW0TFDckNHWUewW+kfvhin43hKtJxAw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

{# Script qui gére l'appel Axios et qui modifiera le DOM  #}
<script>
    // on obtient le formulaire pour 
    const form = document.getElementById('commande-recherche-form');

    // on detectera tous les inputs du form, peu importe quel fitre on change
    form.addEventListener('input', function(event) {
        event.preventDefault();
        // obtenir le div pour afficher les résultats
        let divResultats = document.getElementById ("div_resultats");

        console.log ("appel recherche...");
        const formData = new FormData(form);
        // message de "recherche en cours ..."
        divResultats.innerHTML = "Recherche en cours...";


        // appel axios. On a utilisé la vraie route au lieu d'un name car on ne peut pas incruster du twig (path)
        // dans le JS. On peut contourner ce fait, mais on ne le fera pas ici
        axios.post('/filtre/commande/ajax', formData)
            .then(response => {
                console.log (response.data); // axios parse déjà, on peut parcourir l'array d'objets
                

                // vider le div
                divResultats.innerHTML = "";

                // parcourir l'array d'objets reçu (car le JSON a été déjà parsé par AXIOS)    
                let arrayCommandes = response.data;   
                console.log (arrayCommandes);    
                arrayCommandes.forEach ( function (commandes)  {
                        // manipuler le DOM. Ex: vider un div et le remplir avec les résultats
                        divResultats.innerHTML += "<p><b>Numero:</b> " + commandes.numero + "</p>";

                        divResultats.innerHTML +="<p><b>Date:</b> " + commandes.dateCommande + "</p>"; 
                        divResultats.innerHTML +="<p><b>Statut:</b> " + commandes.statutCommande + "</p>" ;
                        })
                        divResultats.innerHTML += "<hr>";
                    }
                );
            })
            {# .catch(error => {
                console.error(error);
            }); #}
    
</script>

{% endblock %}


